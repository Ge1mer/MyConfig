esphome:
  name: meteostation
  platform: ESP8266
  board: esp12e
 
  libraries:
#    - "uFire SHT20"
    - "ArduinoJson"
  includes:
    - include/sht20.h
    - include/ufire/uFire_SHT20.h
    - include/ufire/uFire_SHT20.cpp

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  manual_ip:
    static_ip: 192.168.1.124
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Meteostation Fallback Hotspot"
    password: "d9qVfCOEK3hN"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "meteo123"

ota:
  password: "meteo123"
  
web_server:
  port: 128
  
  
status_led:
  pin: 
    number: GPIO2
    inverted: true
   
  
i2c:
  sda: GPIO4
  scl: GPIO5
  scan: True
  id: bus_a  
  
sensor:

  - platform: custom
    lambda: |-
      auto sht20 = new SHT20();
      App.register_component(sht20);
      return {sht20->temperature_sensor, sht20->humidity_sensor, sht20->vpd_sensor, sht20->dew_point_sensor};
    sensors:
      - name: "Temperature"
        id: sensor_temperature
        unit_of_measurement: °C
        accuracy_decimals: 2
        device_class: temperature
      - name: "Humidity"
        id: sensor_humidity
        unit_of_measurement: "%"
        accuracy_decimals: 2
        device_class: humidity
      - name: "Vapour-pressure deficit"
        id: sensor_vpd
        unit_of_measurement: "kPa"
        accuracy_decimals: 2
      - name: "Dew point"
        id: sensor_dew_point
        unit_of_measurement: °C
        accuracy_decimals: 2
        device_class: temperature
        



    
  - platform: bh1750
    name: "BH1750 Illuminance"
    address: 0x23
    id: bh1750_illuminance
    update_interval: 60s
  
  - platform: bme280
    temperature:
      name: "Inside Temperature"
      oversampling: 16x
    pressure:
      name: "BME280 Pressure"
    humidity:
      name: "Inside Humidity"
    address: 0x76
    update_interval: 60s  
    
  
 
#  - platform: adc
#    pin: A0
#    name: "ADC value"
#    update_interval: 30s
#    accuracy_decimals: 4
#    internal: true
    
#  - platform: resistance
#    id: resistance_sensor
#    sensor: source_sensor
#    configuration: UPSTREAM
#    resistor: 10kOhm
#    name: Resistance Sensor
#    reference_voltage: 5V
#    internal: True
#  - platform: adc
#    id: source_sensor
#    pin: A0
#    internal: True

#  - platform: template
#    name: "Corrected rezistance"
  #  accuracy_decimals: 2
#    unit_of_measurement: "Ω"
#    id: corr_resistance
#    icon: mdi:periodic-table-co2
#    filters:
#    - median:
#        window_size: 6
#        send_every: 4
#        send_first_at: 3
#    lambda: |- 
#      return ( id(resistance_sensor).state/((0.00035*id(BME280_temperature).state*id(BME280_temperature).state)-0.02718*id(BME280_temperature).state+1.39538-(id(BME280_humidity).state-33.0)*0.0018));
#    update_interval: 30s   
#    internal: true
    
#  - platform: template
#    name: "CO2_Sensor"
  #  accuracy_decimals: 2
#    unit_of_measurement: "ppm"
#    icon: mdi:molecule-co2
#    filters:
#    - median:
#        window_size: 6
#        send_every: 4
#        send_first_at: 3
#    lambda: |- 
#      return ( 116.6020682 * pow((id(resistance_sensor).state/2320000), -2.769034857));
#    update_interval: 30s
#    internal: true
    
#  - platform: template
#    name: "CO2_Sensor_correct"
  #  accuracy_decimals: 2
#    unit_of_measurement: "ppm"
#    icon: mdi:molecule-co2
#    filters:
#    - median:
#        window_size: 6
#        send_every: 4
#        send_first_at: 3
#    lambda: |- 
#      return ( 116.6020682 * pow((id(corr_resistance).state/2320000), -2.769034857));
#    update_interval: 30s
#    internal: true
    
#  - platform: template
#    filters:
#    - median:
#        window_size: 6
#        send_every: 4
#        send_first_at: 3
#    name: "rzero"
#    unit_of_measurement: "Ω"
#    update_interval: 30s
#    internal: true
#    lambda: |-
#      return (id(resistance_sensor).state * pow((417/116.6020682), (1.0/2.769034857)));
    
#  - platform: template
#    filters:
#    - median:
#        window_size: 6
#        send_every: 4
#        send_first_at: 3
#    name: "rzero_correct"
#    unit_of_measurement: "ohm"
#    update_interval: 30s
#    internal: true
#    lambda: |-
#      return (id(corr_resistance).state * pow((417/116.6020682), (1.0/2.769034857)));  

    
  - platform: wifi_signal
    name: "Meteostation WiFi Signal"
    update_interval: 60s
    
  - platform: uptime
    id: device_uptime
    internal: true
#    name: "Meteostation uptime"

text_sensor:

  - platform: template
    name: "Meteostation uptime"
    lambda: |-
      uint32_t uptime = (id(device_uptime).state);
      int minutes = (uptime % 3600) / 60;
      int hours = (uptime % 86400) / 3600;
      int days = uptime / 86400;
      if (days > 0) {
        return { (String(days) + " д." + String(hours) + " ч." + String(minutes) + " мин.").c_str() };
      }
      if (hours > 0) {
        return { (String(hours) + " ч. " + String(minutes) + " мин.").c_str() };
      } else {
        return { (String(minutes) + " мин.").c_str() };
      }
    update_interval: 60s
    icon: mdi:clock-start
    
switch:
  - platform: restart
    name: "Meteostation restart"

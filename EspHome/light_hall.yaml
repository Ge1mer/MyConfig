esphome:
  name: light_hall
  platform: ESP8266
  board: esp12e

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  manual_ip:
    static_ip: 192.168.1.126
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    
    # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Light Hall Fallback Hotspot"
    password: "qJDe4H8JDDB2"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: hal1
  reboot_timeout: 0s

ota:
  password: hal1

status_led:
  pin: 
    number: GPIO12
    inverted: True


output:
  - platform: gpio
    pin: GPIO16
    id: light_1g_relay
  
    
light:
  - platform: binary
    name: 'light_1g_relay'
    id: light_mt_1g_relay
    output: light_1g_relay
    restore_mode: ALWAYS_OFF


binary_sensor:
  - platform: remote_receiver
    name: RF_switch1
    rc_switch_raw:
      code: '001110111101101010101000'
      protocol: 6 
    filters:
    - delayed_off: 300ms
    on_press:
      then:
        - light.toggle: light_mt_1g_relay
    
  - platform: remote_receiver
    name: RF_switch2
    rc_switch_raw:
      code: '001110111101101010100010'
      protocol: 6 
    filters:
    - delayed_off: 300ms
    
  - platform: remote_receiver
    name: Door_open
    rc_switch_raw:
      code: '011110101111000100100011'
      protocol: 6 
    filters:
    - delayed_off: 300ms
 
  
  - platform: remote_receiver
    name: Hall_motion
    device_class: motion
    rc_switch_raw:
      code: '010100000011010011101100'
#      code: '01010000001101001110'
      protocol: 6 
    filters:
    - delayed_off: 300ms  
    

remote_receiver:
  pin:
    number: GPIO4
    inverted: true
  dump: rc_switch
  tolerance: 50%
  filter: 250us
  idle: 4ms
  buffer_size: 1kb        
  
sensor:  
  - platform: wifi_signal
    name: "Hall WiFi Signal"
    update_interval: 60s
    
  - platform: uptime
    id: device_uptime
    internal: true
#    name: "Meteostation uptime"

text_sensor:

  - platform: template
    name: "Hall uptime"
    lambda: |-
      uint32_t uptime = (id(device_uptime).state);
      int minutes = (uptime % 3600) / 60;
      int hours = (uptime % 86400) / 3600;
      int days = uptime / 86400;
      if (days > 0) {
        return { (String(days) + " д." + String(hours) + " ч." + String(minutes) + " мин.").c_str() };
      }
      if (hours > 0) {
        return { (String(hours) + " ч. " + String(minutes) + " мин.").c_str() };
      } else {
        return { (String(minutes) + " мин.").c_str() };
      }
    update_interval: 60s
    icon: mdi:clock-start
    
switch:
  - platform: restart
    name: "Hall restart"
 

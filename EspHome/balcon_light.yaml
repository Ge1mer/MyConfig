esphome:
  name: balcon_light
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  manual_ip:
    static_ip: 192.168.1.131
    gateway: 192.168.1.1
    subnet: 255.255.255.0
 

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Balcon Light Fallback Hotspot"
    password: "sDWg6ZObCzmz"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "Balcon"

ota:
  password: "Balcon"

# Example configuration entry
dallas:
  - pin: 4

# Individual sensors
sensor:
  - platform: dallas
    address: 0x7E3C01B5564DF928
    name: "Balcon Outside Temperature"
    accuracy_decimals: 2
  
  - platform: wifi_signal
    name: "Balcon WiFi Signal"
    update_interval: 60s  
    
  - platform: uptime
    id: device_uptime
    internal: true
#    name: "Meteostation uptime"  
    
binary_sensor:
  - platform: gpio
    pin: 14
    filters:
      - invert:
      - delayed_on: 20ms
    name: light_1g_button
    id: light_1g_button
    on_state:
      then:
        - light.toggle: light_mt_1g_relay
      
    
output:
  - platform: gpio
    pin: GPIO16
    id: light_1g_relay
  
    
light:
  - platform: binary
    name: 'light_1g_relay'
    id: light_mt_1g_relay
    output: light_1g_relay
    restore_mode: ALWAYS_OFF    
    
  

text_sensor:

  - platform: template
    name: "Balcon uptime"
    lambda: |-
      uint32_t uptime = (id(device_uptime).state);
      int minutes = (uptime % 3600) / 60;
      int hours = (uptime % 86400) / 3600;
      int days = uptime / 86400;
      if (days > 0) {
        return { (String(days) + " д." + String(hours) + " ч." + String(minutes) + " мин.").c_str() };
      }
      if (hours > 0) {
        return { (String(hours) + " ч. " + String(minutes) + " мин.").c_str() };
      } else {
        return { (String(minutes) + " мин.").c_str() };
      }
    update_interval: 60s
    icon: mdi:clock-start
    
switch:
  - platform: restart
    name: "Balcon restart"    
    
  